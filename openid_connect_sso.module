<?php

/**
 * @file
 * Provides basic SSO functionality.
 */

/**
 * Implements hook_menu().
 */
function openid_connect_sso_menu() {
  $items = array();
  $items['admin/config/services/openid-connect-sso'] = array(
    'title' => 'OpenID Connect Single Sign-on',
    'description' => 'Configure single sign-on.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_connect_sso_settings_form'),
    'access arguments' => array('access administration pages'),
  );

  return $items;
}

/**
 * Form builder: Settings form.
 */
function openid_connect_sso_settings_form($form, &$form_state) {
  $link = l(t('documentation'), 'https://drupal.org/node/2274367');
  $form['documentation_link'] = array(
    '#markup' => t('Visit the !link for setup instructions.', array('!link' => $link)),
  );

  $form['openid_connect_sso_enabled'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable SSO'),
    '#default_value' => variable_get('openid_connect_sso_enabled', 0),
  );

  $form['openid_connect_sso_script_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SSO script URL'),
    '#description' => t('The first URL to visit in the SSO redirection chain.'),
    '#default_value' => openid_connect_sso_get_script_url(),
  );

  $form['openid_connect_sso_cookie_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie domain'),
    '#description' => t('The domain name to use when clearing SSO cookies. Leave this blank to use the current host name.'),
    '#default_value' => variable_get('openid_connect_sso_cookie_domain'),
    '#element_validate' => array('openid_connect_sso_validate_cookie_domain'),
  );

  return system_settings_form($form);
}

/**
 * Validate the cookie domain.
 */
function openid_connect_sso_validate_cookie_domain(&$element, &$form_state) {
  if (strlen($element['#value'])) {
    $domain = ltrim($element['#value'], '.');
    if (parse_url('http://' . $domain, PHP_URL_HOST) != $domain) {
      form_error($element, t('Invalid cookie domain'));
    }
  }
}

/**
 * Implements hook_init().
 *
 * Logout the user if he has the logout cookie (indicating that he has
 * already logged out of one the sites in the network).
 */
function openid_connect_sso_init() {
  $needs_logout = !user_is_anonymous() && isset($_COOKIE['Drupal_visitor_SSOLogout']);
  if ($needs_logout) {
    // The user might be trying to log in, having already logged out on a
    // client site. In that case, we want to log the user out and redirect back
    // to the same page.
    $oauth2_login = isset($_GET['client_id'], $_GET['redirect_uri']) && $_GET['q'] == 'oauth2/authorize';

    if ($oauth2_login) {
      // Log out the user manually. We can't use user_logout(), because we want
      // to skip a drupal_goto().
      global $user;
      watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
      module_invoke_all('user_logout', $user);
      session_destroy();
      $user = drupal_anonymous_user();
    }
    else {
      module_load_include('pages.inc', 'user');
      user_logout();
    }
  }
  elseif (isset($_COOKIE['Drupal_visitor_SSOLogout'])) {
    // Ensure that the logout cookie is removed.
    openid_connect_sso_remove_cookie('Drupal.visitor.SSOLogout');
  }
}

/**
 * Ensure that a cookie is removed for the correct domain.
 *
 * @param string $name
 */
function openid_connect_sso_remove_cookie($name) {
  $cookie_domain = variable_get('openid_connect_sso_cookie_domain', $_SERVER['HTTP_HOST']);
  $cookie_domain = '.' . ltrim($cookie_domain, '.');
  setcookie($name, '', time() - 3600, '/', $cookie_domain);
  $name_as_key = str_replace('.', '_', $name);
  unset($_COOKIE[$name_as_key]);
}

/**
 * Implements hook_user_login().
 *
 * Request a redirect after a successful login.
 */
function openid_connect_sso_user_login(&$edit, $account) {
  // The presence of a cookie or session param would indicate that the user
  // is already in the middle of logging into the network.
  $has_cookie = isset($_COOKIE['Drupal_visitor_SSOLogin']);
  $has_session_param = isset($_SESSION['oauth2_server_authorize']);
  if (!$has_cookie && !$has_session_param) {
    openid_connect_sso_set_redirect('login');
  }

  if ($has_cookie) {
    openid_connect_sso_remove_cookie('Drupal.visitor.SSOLogin');
  }
}

/**
 * Implements hook_user_logout().
 *
 * Request a redirect after a successful logout.
 */
function openid_connect_sso_user_logout($account) {
  // The presence of a cookie would indicate that the user is already
  // in the middle of logging out of the network.
  if (!isset($_COOKIE['Drupal_visitor_SSOLogout'])) {
    openid_connect_sso_set_redirect('logout');
  }
  else {
    // Remove the cookie, it has done its purpose.
    openid_connect_sso_remove_cookie('Drupal.visitor.SSOLogout');
  }
}

/**
 * Sets an SSO redirect to be performed on page shutdown.
 *
 * @param $type
 *   The type of redirect to perform. "login" or "logout".
 */
function openid_connect_sso_set_redirect($type = NULL) {
  $redirect = &drupal_static(__FUNCTION__, NULL);
  if (isset($type)) {
    $redirect = $type;
  }

  return $redirect;
}

/**
 * Returns the SSO redirect to be performed on page shutdown, if any.
 */
function openid_connect_sso_get_redirect() {
  return openid_connect_sso_set_redirect();
}

/**
 * Returns the SSO script url based on the configured location.
 */
function openid_connect_sso_get_script_url() {
  global $base_url, $is_https;

  $location = variable_get('openid_connect_sso_script_location', 'drupal');

  if ($location == 'drupal') {
    $url = $base_url . '/sso.php';
  }
  else {
    $protocol = $is_https ? 'https://' : 'http://';
    $url = str_replace($protocol, $protocol . 'a.', $base_url);
  }

  $url = variable_get('openid_connect_sso_script_url', $url);
  return $url;
}

/**
 * Implements hook_exit().
 *
 * Redirect to the SSO script, so that we set cookies on each network site.
 */
function openid_connect_sso_exit($destination = NULL) {
  $enabled = variable_get('openid_connect_sso_enabled', 0);
  if (!$enabled) {
    return;
  }
  $redirect = openid_connect_sso_get_redirect();
  if (!$redirect) {
    return;
  }

  $url_options = array(
    'absolute' => TRUE,
    'query' => array(
      'op' => $redirect,
      'origin_host' => $_SERVER['HTTP_HOST'],
    ),
  );
  if ($redirect == 'login') {
      // The $destination parameter is only set if this is invoked via
      // drupal_goto().
      if ($destination === NULL) {
        $options = array('absolute' => TRUE);
        if (isset($_GET['destination'])) {
          $path = $_GET['destination'];
        }
        else {
          $path = $_GET['q'];
          if ($query = drupal_get_query_parameters()) {
            $options['query'] = $query;
          }
        }
        $destination = url($path, $options);
      }

    // A core bug sets $destination to user/login when user/$uid is
    // requested instead. Even though that works, we set the proper url
    // here for clarity sake.
    $login_url = url('user/login', array('absolute' => TRUE));
    if (empty($destination) || $destination == $login_url) {
      $destination = url('user', array('absolute' => TRUE));
    }

    // Set the destination to which the SSO script will return the user.
    $url_options['query']['destination'] = $destination;
  }

  // drupal_goto() performs a drupal_exit() which calls hook_exit().
  // Thus, the redirect is performed manually, to avoid infinite loops.
  $sso_script_url = openid_connect_sso_get_script_url();
  $url = url($sso_script_url, $url_options);
  header('Location: ' . $url, 302);
}
